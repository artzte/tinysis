%h1.left= @enrollment.contract.name
= render :partial => 'report_paging_buttons'
.clear
%p= link_to 'Return to summary page', contract_status_detail_path(@enrollment.contract)
%h2= @student.last_name_first
= render :partial => 'enrollment_summary', :object => @enrollment
%table#report.tiny.fixed.padded
  %thead
    %tr
      %th.month Month
      %th.academic Academic
      %th.attendance Attendance
      %th.ale SLP Met
      %th.notes Notes
  %tbody
    - @statusable_months.each do |m|
      - m_text = m.strftime('%b %Y')
      - @status = @statuses[m]
      - current = @month==m
      - active = (current && @privs[:edit])
      - klass = cycle_stripes
      - id = nil
      - if current
        - klass << " current"
      - if @status
        - notes = notes_for @status, :notes_hash => @status_notes
        - if active
          - id = "status_#{@status.id}"
        - else
          - aca = Status::STATUS_NAMES[@status.academic_status]
          - att = Status::STATUS_NAMES[@status.attendance_status]
          - ale = @status.met_fte_requirements ? 'Met' : 'Not met'
      - elsif active
        - raise ArgumentError, "Course status record for active month is missing."
      - elsif @this_month >= m
        - ale = att = aca = notes = '&ndash;'
      - else
        - ale = att = aca = notes = '?'
      %tr{:class=>klass, :id => id}
        - if active
          %td.month
            %strong= m_text
          %td.academic= select_tag("status[academic_status]", aca_options(@status.academic_status), :id => 'status_academic')
          %td.attendance= select_tag("status[attendance_status]", att_options(@status.attendance_status), :id => 'status_attendance')
          %td.ale= check_box("status", "met_fte_requirements", :style=>'height: 20px; width: 20px')
        - else
          %td.month
            - if @privs[:edit]
              = link_to m_text, contract_report_path(:id => @enrollment, :m => m.to_s)
            - else
              = m_text
          %td.academic= aca
          %td.attendance= att
          %td.fte= ale
        %td.notes= notes
- if @enrollment.contract.assignments.count > 0
  - today = Date.today
  - turnins = Hash[*@enrollment.turnins.collect{|t| [t.assignment_id, t]}.flatten]
  - turnins_notes_hash = Note.notes_hash(@enrollment.turnins)
  %h3 Assignments
  %table.tiny.padded
    %thead
      %tr
        %th.assignment Assignment
        %th.due Due
        %th.status Status
        %th.notes Notes
    %tbody
      - @enrollment.contract.assignments.find(:all, :order => 'due_date ASC').each do |a|
        - t = turnins[a.id]
        %tr{:class=>cycle_stripes}
          %td.assignment= a.name
          %td.due= d(a.due_date)
          %td.status= t ? t.status.to_s.titleize : a.due_date>today ? 'Missing' : '&ndash;'
          %td.notes= t ? notes_for(t, :notes_hash => turnins_notes_hash, :editable => false) : '&nbsp;'
